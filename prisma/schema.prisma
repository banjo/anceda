generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]

  members     Member[]
  invitations Invitation[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum OrganizationType {
  PRIMARY
  SECONDARY
}

model Organization {
  id                  String             @id @default(cuid())
  name                String
  slug                String?
  logo                String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  members             Member[]
  invitations         Invitation[]
  collections         Collection[]
  accessedCollections CollectionAccess[]

  // Custom data
  type OrganizationType @default(PRIMARY)

  // For primary organizations
  invitedOrganizations Organization[] @relation("OrganizationInvitations")

  // For secondary organizations
  primaryOrganization   Organization? @relation("OrganizationInvitations", fields: [primaryOrganizationId], references: [id])
  primaryOrganizationId String?

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("member")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Invitation {
  id             String           @id @default(cuid())
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String
  status         InvitationStatus
  expiresAt      DateTime
  inviterId      String
  user           User             @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("invitation")
}

// --- IMAGES
model Collection {
  id               String             @id @default(cuid())
  name             String
  description      String?
  organizationId   String
  organization     Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  images           Image[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isPublic         Boolean            @default(false)
  CollectionAccess CollectionAccess[]

  @@map("collection")
}

model Image {
  id           String     @id @default(cuid())
  filename     String
  originalName String?
  path         String // R2/S3 path
  url          String // Public URL for accessing the image
  mimeType     String
  size         Int // Size in bytes
  width        Int?
  height       Int?
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Fields for future AI processing and tagging
  tags String[] @default([])

  @@map("image")
}

model CollectionAccess {
  id             String       @id @default(cuid())
  collectionId   String
  collection     Collection   @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  grantedById    String? // ID of the user who granted access

  @@unique([collectionId, organizationId])
  @@map("collection_access")
}
